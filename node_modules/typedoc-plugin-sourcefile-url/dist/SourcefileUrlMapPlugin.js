"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Path = require("path");
const FS = require("fs-extra");
const component_1 = require("typedoc/dist/lib/utils/component");
const components_1 = require("typedoc/dist/lib/converter/components");
const converter_1 = require("typedoc/dist/lib/converter/converter");
let SourcefileUrlMapPlugin = class SourcefileUrlMapPlugin extends components_1.ConverterComponent {
    initialize() {
        this.listenTo(this.owner, converter_1.Converter.EVENT_BEGIN, this.onBegin);
    }
    onBegin() {
        // read options parameter
        const options = this.application.options;
        const mapRelativePath = options.getValue('sourcefile-url-map');
        const urlPrefix = options.getValue('sourcefile-url-prefix');
        if ((typeof mapRelativePath !== 'string') && (typeof urlPrefix !== 'string')) {
            return;
        }
        try {
            if ((typeof mapRelativePath === 'string') && (typeof urlPrefix === 'string')) {
                throw new Error('use either --sourcefile-url-prefix or --sourcefile-url-map option');
            }
            if (typeof mapRelativePath === 'string') {
                this.readMappingJson(mapRelativePath);
            }
            else if (typeof urlPrefix === 'string') {
                this.mappings = [{
                        pattern: new RegExp('^'),
                        replace: urlPrefix
                    }];
            }
            // register handler
            this.listenTo(this.owner, converter_1.Converter.EVENT_RESOLVE_END, this.onEndResolve);
        }
        catch (e) {
            console.error('typedoc-plugin-sourcefile-url: ' + e.message);
        }
    }
    readMappingJson(mapRelativePath) {
        // load json
        const mapAbsolutePath = Path.join(process.cwd(), mapRelativePath);
        let json;
        try {
            json = JSON.parse(FS.readFileSync(mapAbsolutePath, 'utf8'));
        }
        catch (e) {
            throw new Error('error reading --sourcefile-url-map json file: ' + e.message);
        }
        // validate json
        if (!(json instanceof Array)) {
            throw new Error('--sourcefile-url-map json file has to have Array as root element');
        }
        this.mappings = [];
        // validate & process json
        for (const mappingJson of json) {
            if (mappingJson instanceof Object && mappingJson.hasOwnProperty('pattern') && mappingJson.hasOwnProperty('replace') && typeof mappingJson['pattern'] === 'string' && typeof mappingJson['replace'] === 'string') {
                let regExp = null;
                try {
                    regExp = new RegExp(mappingJson['pattern']);
                }
                catch (e) {
                    throw new Error('error reading --sourcefile-url-map: ' + e.message);
                }
                this.mappings.push({
                    pattern: regExp,
                    replace: mappingJson['replace']
                });
            }
            else {
                throw new Error('--sourcefile-url-map json file syntax has to be: [{"pattern": "REGEX PATTERN STRING WITHOUT ENCLOSING SLASHES", replace: "STRING"}, ETC.]');
            }
        }
    }
    onEndResolve(context) {
        if (this.mappings === undefined) {
            throw new Error('assertion fail');
        }
        const project = context.project;
        // process mappings
        for (const sourceFile of project.files) {
            for (const mapping of this.mappings) {
                if (sourceFile.fileName.match(mapping.pattern)) {
                    sourceFile.url = sourceFile.fileName.replace(mapping.pattern, mapping.replace);
                    break;
                }
            }
        }
        // add line anchors
        for (let key in project.reflections) {
            const reflection = project.reflections[key];
            if (reflection.sources) {
                reflection.sources.forEach((source) => {
                    if (source.file && source.file.url) {
                        source.url = source.file.url + '#L' + source.line;
                    }
                });
            }
        }
    }
};
SourcefileUrlMapPlugin = __decorate([
    component_1.Component({ name: 'sourcefile-url' })
], SourcefileUrlMapPlugin);
exports.SourcefileUrlMapPlugin = SourcefileUrlMapPlugin;
